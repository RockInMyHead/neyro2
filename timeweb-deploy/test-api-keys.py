#!/usr/bin/env python3

import os
import sys
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π"""

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Stability AI –∫–ª—é—á
    stability_key = os.getenv("STABILITY_API_KEY", "")
    if stability_key and stability_key != "sk-9BlZisDvEvF9Jewp4AbNOfay24M44gTGdCTRAeN9WnCX5uld":
        print(f"‚úÖ STABILITY_API_KEY: {stability_key[:20]}... (–Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
    else:
        print("‚ùå STABILITY_API_KEY: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI –∫–ª—é—á
    openai_key = os.getenv("OPENAI_API_KEY", "")
    if openai_key and openai_key != "sk-your-openai-key-here":
        print(f"‚úÖ OPENAI_API_KEY: {openai_key[:20]}... (–Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
    else:
        print("‚ùå OPENAI_API_KEY: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç placeholder")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    api_base_url = os.getenv("API_BASE_URL", "")
    print(f"‚úÖ API_BASE_URL: {api_base_url}")

    timeout = os.getenv("STABILITY_TIMEOUT_SECONDS", "60")
    print(f"‚úÖ STABILITY_TIMEOUT_SECONDS: {timeout}")

    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    has_keys = (stability_key and stability_key != "sk-9BlZisDvEvF9Jewp4AbNOfay24M44gTGdCTRAeN9WnCX5uld") or \
               (openai_key and openai_key != "sk-your-openai-key-here")

    if has_keys:
        print("üéâ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏!")
        print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª timeweb-deploy/.env")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ STABILITY_API_KEY –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –æ—Ç Stability AI")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ OPENAI_API_KEY –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –æ—Ç OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: ./start.sh")
        return False

async def test_backend():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º backend —Å–µ—Ä–≤–µ—Ä"""

    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend —Å–µ—Ä–≤–µ—Ä–∞...")
    print("=" * 50)

    try:
        from app import app
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        routes = []
        for route in app.routes:
            if hasattr(route, 'path'):
                routes.append(route.path)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        important_routes = ['/generate_dalle', '/session', '/docs']
        for route in important_routes:
            if any(route in r for r in routes):
                print(f"‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç {route} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç {route} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FastAPI: {e}")
        return False

    return True

if __name__ == "__main__":
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Neuro Event API")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    keys_ok = check_api_keys()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
    backend_ok = asyncio.run(test_backend())

    print("\n" + "=" * 50)
    if keys_ok and backend_ok:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
        sys.exit(1)